---
swagger: "2.0"
info:
  description: "Build custom integrations with the LaunchDarkly REST API"
  version: "2.0.14"
  title: "LaunchDarkly REST API"
  termsOfService: "https://launchdarkly.com/terms"
  contact:
    name: "LaunchDarkly Support"
    url: "https://support.launchdarkly.com"
    email: "support@launchdarkly.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "app.launchdarkly.com"
basePath: "/api/v2"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
security:
- Token: []
paths:
  /projects:
    get:
      tags:
      - "Projects"
      summary: "Returns a list of all projects in the account."
      operationId: "getProjects"
      parameters: []
      responses:
        200:
          description: "Projects response"
          schema:
            $ref: "#/definitions/Projects"
        401:
          description: "Invalid access token."
    post:
      tags:
      - "Projects"
      summary: "Create a new project with the given key and name."
      operationId: "postProject"
      parameters:
      - in: "body"
        name: "projectBody"
        description: "Project keys must be unique within an account."
        required: true
        schema:
          $ref: "#/definitions/projectBody"
        x-exportParamName: "ProjectBody"
      responses:
        201:
          description: "Successful Project response."
          schema:
            $ref: "#/definitions/Project"
        400:
          description: "Invalid request body."
        401:
          description: "Invalid access token."
        409:
          description: "Status conflict."
  /projects/{projectKey}:
    get:
      tags:
      - "Projects"
      summary: "Fetch a single project by key."
      operationId: "getProject"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      responses:
        200:
          description: "Successful Project response."
          schema:
            $ref: "#/definitions/Project"
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
    delete:
      tags:
      - "Projects"
      summary: "Delete a project by key. Caution-- deleting a project will delete\
        \ all associated environments and feature flags. You cannot delete the last\
        \ project in an account."
      operationId: "deleteProject"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      responses:
        204:
          description: "Action completed successfully."
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
    patch:
      tags:
      - "Projects"
      summary: "Modify a project by ID."
      operationId: "patchProject"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - in: "body"
        name: "patchDelta"
        description: "Requires a JSON Patch representation of the desired changes\
          \ to the project. 'http://jsonpatch.com/'"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/PatchOperation"
        x-exportParamName: "PatchDelta"
      responses:
        200:
          description: "Successful Project response."
          schema:
            $ref: "#/definitions/Project"
        400:
          description: "Invalid request body."
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
        409:
          description: "Status conflict."
  /projects/{projectKey}/environments:
    post:
      tags:
      - "Environments"
      summary: "Create a new environment in a specified project with a given name,\
        \ key, and swatch color."
      operationId: "postEnvironment"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - in: "body"
        name: "environmentBody"
        description: "New environment."
        required: true
        schema:
          $ref: "#/definitions/EnvironmentPost"
        x-exportParamName: "EnvironmentBody"
      responses:
        201:
          description: "Environment response."
          schema:
            $ref: "#/definitions/Environment"
        400:
          description: "Invalid request body."
        401:
          description: "Invalid access token."
        409:
          description: "Status conflict."
  /projects/{projectKey}/environments/{environmentKey}:
    get:
      tags:
      - "Environments"
      summary: "Get an environment given a project and key."
      operationId: "getEnvironment"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      responses:
        200:
          description: "Environment response."
          schema:
            $ref: "#/definitions/Environment"
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
    delete:
      tags:
      - "Environments"
      summary: "Delete an environment in a specific project."
      operationId: "deleteEnvironment"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      responses:
        204:
          description: "Action completed successfully."
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
    patch:
      tags:
      - "Environments"
      summary: "Modify an environment by ID."
      operationId: "patchEnvironment"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - in: "body"
        name: "patchDelta"
        description: "Requires a JSON Patch representation of the desired changes\
          \ to the project. 'http://jsonpatch.com/'"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/PatchOperation"
        x-exportParamName: "PatchDelta"
      responses:
        200:
          description: "Environment response."
          schema:
            $ref: "#/definitions/Environment"
        400:
          description: "Invalid request body."
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
        409:
          description: "Status conflict."
  /flags/{projectKey}:
    get:
      tags:
      - "Feature flags"
      summary: "Get a list of all features in the given project."
      operationId: "getFeatureFlags"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "env"
        in: "query"
        description: "By default, each feature will include configurations for each\
          \ environment. You can filter environments with the env query parameter.\
          \ For example, setting env=production will restrict the returned configurations\
          \ to just your production environment."
        required: false
        type: "string"
        x-exportParamName: "Env"
        x-optionalDataType: "String"
      - name: "tag"
        in: "query"
        description: "Filter by tag. A tag can be used to group flags across projects."
        required: false
        type: "string"
        x-exportParamName: "Tag"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Flags response."
          schema:
            $ref: "#/definitions/FeatureFlags"
        401:
          description: "Invalid access token."
    post:
      tags:
      - "Feature flags"
      summary: "Creates a new feature flag."
      operationId: "postFeatureFlag"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - in: "body"
        name: "featureFlagBody"
        description: "Create a new feature flag."
        required: true
        schema:
          $ref: "#/definitions/featureFlagBody"
        x-exportParamName: "FeatureFlagBody"
      - name: "clone"
        in: "query"
        description: "The key of the feature flag to be cloned. The key identifies\
          \ the flag in your code.  For example, setting clone=flagKey will copy the\
          \ full targeting configuration for all environments (including on/off state)\
          \ from the original flag to the new flag."
        required: false
        type: "string"
        x-exportParamName: "Clone"
        x-optionalDataType: "String"
      responses:
        201:
          description: "Flag response."
          schema:
            $ref: "#/definitions/FeatureFlag"
        400:
          description: "Invalid request body."
        401:
          description: "Invalid access token."
        409:
          description: "Status conflict."
  /flags/{projectKey}/{featureFlagKey}:
    get:
      tags:
      - "Feature flags"
      summary: "Get a single feature flag by key."
      operationId: "getFeatureFlag"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - name: "env"
        in: "query"
        description: "By default, each feature will include configurations for each\
          \ environment. You can filter environments with the env query parameter.\
          \ For example, setting env=production will restrict the returned configurations\
          \ to just your production environment."
        required: false
        type: "string"
        x-exportParamName: "Env"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Flag response."
          schema:
            $ref: "#/definitions/FeatureFlag"
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
    delete:
      tags:
      - "Feature flags"
      summary: "Delete a feature flag in all environments. Be careful-- only delete\
        \ feature flags that are no longer being used by your application."
      operationId: "deleteFeatureFlag"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      responses:
        204:
          description: "Action completed successfully."
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
    patch:
      tags:
      - "Feature flags"
      summary: "Perform a partial update to a feature."
      operationId: "patchFeatureFlag"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - in: "body"
        name: "patchComment"
        description: "Requires a JSON Patch representation of the desired changes\
          \ to the project, and an optional comment. 'http://jsonpatch.com/' Feature\
          \ flag patches also support JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386'\
          \ The addition of comments is also supported."
        required: true
        schema:
          $ref: "#/definitions/patchComment"
        x-exportParamName: "PatchComment"
      responses:
        200:
          description: "Feature flag response."
          schema:
            $ref: "#/definitions/FeatureFlag"
        400:
          description: "Invalid request body."
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
        409:
          description: "Status conflict."
  /flags/{projectKey}/{environmentKey}/{featureFlagKey}/copy:
    post:
      tags:
      - "Feature flags"
      summary: "Copies the feature flag configuration from one environment to the\
        \ same feature flag in another environment."
      operationId: "copyFeatureFlag"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      responses:
        201:
          description: "Flag confguration copy response."
          schema:
            $ref: "#/definitions/FeatureFlag"
        400:
          description: "Invalid request body."
        401:
          description: "Invalid access token."
        409:
          description: "Status conflict."
  /flag-statuses/{projectKey}/{environmentKey}:
    get:
      tags:
      - "Feature flags"
      summary: "Get a list of statuses for all feature flags. The status includes\
        \ the last time the feature flag was requested, as well as the state of the\
        \ flag."
      operationId: "getFeatureFlagStatuses"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      responses:
        200:
          description: "List of feature flag statuses."
          schema:
            $ref: "#/definitions/FeatureFlagStatuses"
        401:
          description: "Invalid access token."
  /flag-statuses/{projectKey}/{environmentKey}/{featureFlagKey}:
    get:
      tags:
      - "Feature flags"
      summary: "Get the status for a particular feature flag."
      operationId: "getFeatureFlagStatus"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      responses:
        200:
          description: "Status of the requested feature flag."
          schema:
            $ref: "#/definitions/FeatureFlagStatus"
        401:
          description: "Invalid access token."
  /segments/{projectKey}/{environmentKey}:
    get:
      tags:
      - "User segments"
      summary: "Get a list of all user segments in the given project."
      operationId: "getUserSegments"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "tag"
        in: "query"
        description: "Filter by tag. A tag can be used to group flags across projects."
        required: false
        type: "string"
        x-exportParamName: "Tag"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Segments response."
          schema:
            $ref: "#/definitions/UserSegments"
        401:
          description: "Invalid access token."
    post:
      tags:
      - "User segments"
      summary: "Creates a new user segment."
      operationId: "postUserSegment"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - in: "body"
        name: "userSegmentBody"
        description: "Create a new user segment."
        required: true
        schema:
          $ref: "#/definitions/userSegmentBody"
        x-exportParamName: "UserSegmentBody"
      responses:
        201:
          description: "User segment response."
          schema:
            $ref: "#/definitions/UserSegment"
        400:
          description: "Invalid request body."
        401:
          description: "Invalid access token."
        409:
          description: "Status conflict."
  /segments/{projectKey}/{environmentKey}/{userSegmentKey}:
    get:
      tags:
      - "User segments"
      summary: "Get a single user segment by key."
      operationId: "getUserSegment"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userSegmentKey"
        in: "path"
        description: "The user segment's key. The key identifies the user segment\
          \ in your code."
        required: true
        type: "string"
        x-exportParamName: "UserSegmentKey"
      responses:
        200:
          description: "User segment response."
          schema:
            $ref: "#/definitions/UserSegment"
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
    delete:
      tags:
      - "User segments"
      summary: "Delete a user segment."
      operationId: "deleteUserSegment"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userSegmentKey"
        in: "path"
        description: "The user segment's key. The key identifies the user segment\
          \ in your code."
        required: true
        type: "string"
        x-exportParamName: "UserSegmentKey"
      responses:
        204:
          description: "Action completed successfully."
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
    patch:
      tags:
      - "User segments"
      summary: "Perform a partial update to a user segment."
      operationId: "patchUserSegment"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userSegmentKey"
        in: "path"
        description: "The user segment's key. The key identifies the user segment\
          \ in your code."
        required: true
        type: "string"
        x-exportParamName: "UserSegmentKey"
      - in: "body"
        name: "PatchOnly"
        description: "Requires a JSON Patch representation of the desired changes\
          \ to the project. 'http://jsonpatch.com/' Feature flag patches also support\
          \ JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386' The addition\
          \ of comments is also supported."
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/PatchOperation"
        x-exportParamName: "PatchOnly"
      responses:
        200:
          description: "User segment response."
          schema:
            $ref: "#/definitions/UserSegment"
        400:
          description: "Invalid request body."
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
        409:
          description: "Status conflict."
  /users/{projectKey}/{environmentKey}:
    get:
      tags:
      - "Users"
      summary: "List all users in the environment. Includes the total count of users.\
        \ In each page, there will be up to 'limit' users returned (default 20). This\
        \ is useful for exporting all users in the system for further analysis. Paginated\
        \ collections will include a next link containing a URL with the next set\
        \ of elements in the collection."
      operationId: "getUsers"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "limit"
        in: "query"
        description: "Pagination limit."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "h"
        in: "query"
        description: "This parameter is required when following \"next\" links."
        required: false
        type: "string"
        x-exportParamName: "H"
        x-optionalDataType: "String"
      - name: "scrollId"
        in: "query"
        description: "This parameter is required when following \"next\" links."
        required: false
        type: "string"
        x-exportParamName: "ScrollId"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Users response."
          schema:
            $ref: "#/definitions/Users"
        401:
          description: "Invalid access token."
  /user-search/{projectKey}/{environmentKey}:
    get:
      tags:
      - "Users"
      summary: "Search users in LaunchDarkly based on their last active date, or a\
        \ search query. It should not be used to enumerate all users in LaunchDarkly--\
        \ use the List users API resource."
      operationId: "getSearchUsers"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "q"
        in: "query"
        description: "Search query."
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "Pagination limit."
        required: false
        type: "integer"
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "offset"
        in: "query"
        description: "Specifies the first item to return in the collection."
        required: false
        type: "integer"
        x-exportParamName: "Offset"
        x-optionalDataType: "Int32"
      - name: "after"
        in: "query"
        description: "A timestamp filter, expressed as a Unix epoch time in milliseconds.\
          \ All entries returned will have occured after this timestamp."
        required: false
        type: "number"
        format: "int64"
        x-exportParamName: "After"
        x-optionalDataType: "Float32"
      responses:
        200:
          description: "Users response."
          schema:
            $ref: "#/definitions/Users"
        401:
          description: "Invalid access token."
  /users/{projectKey}/{environmentKey}/{userKey}:
    get:
      tags:
      - "Users"
      summary: "Get a user by key."
      operationId: "getUser"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userKey"
        in: "path"
        description: "The user's key."
        required: true
        type: "string"
        x-exportParamName: "UserKey"
      responses:
        200:
          description: "User response."
          schema:
            $ref: "#/definitions/User"
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
    delete:
      tags:
      - "Users"
      summary: "Delete a user by ID."
      operationId: "deleteUser"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userKey"
        in: "path"
        description: "The user's key."
        required: true
        type: "string"
        x-exportParamName: "UserKey"
      responses:
        204:
          description: "Action completed successfully."
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
  /users/{projectKey}/{environmentKey}/{userKey}/flags:
    get:
      tags:
      - "User settings"
      summary: "Fetch a single flag setting for a user by key."
      operationId: "getUserFlagSettings"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userKey"
        in: "path"
        description: "The user's key."
        required: true
        type: "string"
        x-exportParamName: "UserKey"
      responses:
        200:
          description: "User flags settings response."
          schema:
            $ref: "#/definitions/UserFlagSettings"
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
  /users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}:
    get:
      tags:
      - "User settings"
      summary: "Fetch a single flag setting for a user by key."
      operationId: "getUserFlagSetting"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userKey"
        in: "path"
        description: "The user's key."
        required: true
        type: "string"
        x-exportParamName: "UserKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      responses:
        200:
          description: "User flag setting response."
          schema:
            $ref: "#/definitions/UserFlagSetting"
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
    put:
      tags:
      - "User settings"
      summary: "Specifically enable or disable a feature flag for a user based on\
        \ their key."
      operationId: "putFlagSetting"
      parameters:
      - name: "projectKey"
        in: "path"
        description: "The project key, used to tie the flags together under one project\
          \ so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "ProjectKey"
      - name: "environmentKey"
        in: "path"
        description: "The environment key, used to tie together flag configuration\
          \ and users under one environment so they can be managed together."
        required: true
        type: "string"
        x-exportParamName: "EnvironmentKey"
      - name: "userKey"
        in: "path"
        description: "The user's key."
        required: true
        type: "string"
        x-exportParamName: "UserKey"
      - name: "featureFlagKey"
        in: "path"
        description: "The feature flag's key. The key identifies the flag in your\
          \ code."
        required: true
        type: "string"
        x-exportParamName: "FeatureFlagKey"
      - in: "body"
        name: "userSettingsBody"
        required: true
        schema:
          $ref: "#/definitions/userSettingsBody"
        x-exportParamName: "UserSettingsBody"
      responses:
        204:
          description: "Action completed successfully."
        400:
          description: "Invalid request body."
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
  /auditlog:
    get:
      tags:
      - "Audit log"
      summary: "Get a list of all audit log entries. The query parameters allow you\
        \ to restrict the returned results by date ranges, resource specifiers, or\
        \ a full-text search query."
      operationId: "getAuditLogEntries"
      parameters:
      - name: "before"
        in: "query"
        description: "A timestamp filter, expressed as a Unix epoch time in milliseconds.\
          \ All entries returned will have before this timestamp."
        required: false
        type: "number"
        x-exportParamName: "Before"
        x-optionalDataType: "Float32"
      - name: "after"
        in: "query"
        description: "A timestamp filter, expressed as a Unix epoch time in milliseconds.\
          \ All entries returned will have occured after this timestamp."
        required: false
        type: "number"
        format: "int64"
        x-exportParamName: "After"
        x-optionalDataType: "Float32"
      - name: "q"
        in: "query"
        description: "Text to search for. You can search for the full or partial name\
          \ of the resource involved or fullpartial email address of the member who\
          \ made the change."
        required: false
        type: "string"
        x-exportParamName: "Q"
        x-optionalDataType: "String"
      - name: "limit"
        in: "query"
        description: "A limit on the number of audit log entries to be returned, between\
          \ 1 and 20."
        required: false
        type: "number"
        x-exportParamName: "Limit"
        x-optionalDataType: "Float32"
      - name: "spec"
        in: "query"
        description: "A resource specifier, allowing you to filter audit log listings\
          \ by resource."
        required: false
        type: "string"
        x-exportParamName: "Spec"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Audit log entries response."
          schema:
            $ref: "#/definitions/AuditLogEntries"
        400:
          description: "Invalid request body."
        401:
          description: "Invalid access token."
  /auditlog/{resourceId}:
    get:
      tags:
      - "Audit log"
      summary: "Use this endpoint to fetch a single audit log entry by its resouce\
        \ ID."
      operationId: "getAuditLogEntry"
      parameters:
      - name: "resourceId"
        in: "path"
        description: "The resource ID."
        required: true
        type: "string"
        x-exportParamName: "ResourceId"
      responses:
        200:
          description: "Audit log entry response."
          schema:
            $ref: "#/definitions/AuditLogEntry"
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
  /webhooks:
    get:
      tags:
      - "Webhooks"
      summary: "Fetch a list of all webhooks."
      operationId: "getWebhooks"
      parameters: []
      responses:
        200:
          description: "Webhooks response."
          schema:
            $ref: "#/definitions/Webhooks"
        401:
          description: "Invalid access token."
    post:
      tags:
      - "Webhooks"
      summary: "Create a webhook."
      operationId: "postWebhook"
      parameters:
      - in: "body"
        name: "webhookBody"
        description: "New webhook."
        required: true
        schema:
          $ref: "#/definitions/webhookBody"
        x-exportParamName: "WebhookBody"
      responses:
        201:
          description: "Webhook response."
          schema:
            $ref: "#/definitions/Webhook"
        400:
          description: "Invalid request body."
        401:
          description: "Invalid access token."
  /webhooks/{resourceId}:
    get:
      tags:
      - "Webhooks"
      summary: "Get a webhook by ID."
      operationId: "getWebhook"
      parameters:
      - name: "resourceId"
        in: "path"
        description: "The resource ID."
        required: true
        type: "string"
        x-exportParamName: "ResourceId"
      responses:
        200:
          description: "Webhook response."
          schema:
            $ref: "#/definitions/Webhook"
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
    delete:
      tags:
      - "Webhooks"
      summary: "Delete a webhook by ID."
      operationId: "deleteWebhook"
      parameters:
      - name: "resourceId"
        in: "path"
        description: "The resource ID."
        required: true
        type: "string"
        x-exportParamName: "ResourceId"
      responses:
        204:
          description: "Action completed successfully."
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
    patch:
      tags:
      - "Webhooks"
      summary: "Modify a webhook by ID."
      operationId: "patchWebhook"
      parameters:
      - name: "resourceId"
        in: "path"
        description: "The resource ID."
        required: true
        type: "string"
        x-exportParamName: "ResourceId"
      - in: "body"
        name: "patchDelta"
        description: "Requires a JSON Patch representation of the desired changes\
          \ to the project. 'http://jsonpatch.com/'"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/PatchOperation"
        x-exportParamName: "PatchDelta"
      responses:
        200:
          description: "Webhook response."
          schema:
            $ref: "#/definitions/Webhook"
        400:
          description: "Invalid request body."
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
        409:
          description: "Status conflict."
  /roles:
    get:
      tags:
      - "Custom roles"
      summary: "Return a complete list of custom roles."
      operationId: "getCustomRoles"
      parameters: []
      responses:
        200:
          description: "Custom roles response."
          schema:
            $ref: "#/definitions/CustomRoles"
        401:
          description: "Invalid access token."
    post:
      tags:
      - "Custom roles"
      summary: "Create a new custom role."
      operationId: "postCustomRole"
      parameters:
      - in: "body"
        name: "customRoleBody"
        description: "New role or roles to create."
        required: true
        schema:
          $ref: "#/definitions/customRoleBody"
        x-exportParamName: "CustomRoleBody"
      responses:
        201:
          description: "Custom role response."
          schema:
            $ref: "#/definitions/CustomRole"
        400:
          description: "Invalid request body."
        401:
          description: "Invalid access token."
        409:
          description: "Status conflict."
  /roles/{customRoleKey}:
    get:
      tags:
      - "Custom roles"
      summary: "Get one custom role by key."
      operationId: "getCustomRole"
      parameters:
      - name: "customRoleKey"
        in: "path"
        description: "The custom role key."
        required: true
        type: "string"
        x-exportParamName: "CustomRoleKey"
      responses:
        200:
          description: "Custom role response."
          schema:
            $ref: "#/definitions/CustomRole"
        400:
          description: "Invalid request body."
        401:
          description: "Invalid access token."
    delete:
      tags:
      - "Custom roles"
      summary: "Delete a custom role by key."
      operationId: "deleteCustomRole"
      parameters:
      - name: "customRoleKey"
        in: "path"
        description: "The custom role key."
        required: true
        type: "string"
        x-exportParamName: "CustomRoleKey"
      responses:
        204:
          description: "Action completed successfully."
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
    patch:
      tags:
      - "Custom roles"
      summary: "Modify a custom role by key."
      operationId: "patchCustomRole"
      parameters:
      - name: "customRoleKey"
        in: "path"
        description: "The custom role key."
        required: true
        type: "string"
        x-exportParamName: "CustomRoleKey"
      - in: "body"
        name: "patchDelta"
        description: "Requires a JSON Patch representation of the desired changes\
          \ to the project. 'http://jsonpatch.com/'"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/PatchOperation"
        x-exportParamName: "PatchDelta"
      responses:
        200:
          description: "Custom role response."
          schema:
            $ref: "#/definitions/CustomRole"
        400:
          description: "Invalid request body."
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
        409:
          description: "Status conflict."
  /members:
    get:
      tags:
      - "Team members"
      summary: "Returns a list of all members in the account."
      operationId: "getMembers"
      parameters: []
      responses:
        200:
          description: "Members response."
          schema:
            $ref: "#/definitions/Members"
        401:
          description: "Invalid access token."
    post:
      tags:
      - "Team members"
      summary: "Invite new members."
      operationId: "postMembers"
      parameters:
      - in: "body"
        name: "membersBody"
        description: "New members to invite."
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/membersBody"
        x-exportParamName: "MembersBody"
      responses:
        201:
          description: "Members response."
          schema:
            $ref: "#/definitions/Members"
        400:
          description: "Invalid request body."
        401:
          description: "Invalid access token."
        409:
          description: "Status conflict."
  /members/{memberId}:
    get:
      tags:
      - "Team members"
      summary: "Get a single team member by ID."
      operationId: "getMember"
      parameters:
      - name: "memberId"
        in: "path"
        description: "The member ID."
        required: true
        type: "string"
        x-exportParamName: "MemberId"
      responses:
        200:
          description: "Member response."
          schema:
            $ref: "#/definitions/Member"
        400:
          description: "Invalid request body."
        401:
          description: "Invalid access token."
    delete:
      tags:
      - "Team members"
      summary: "Delete a team member by ID."
      operationId: "deleteMember"
      parameters:
      - name: "memberId"
        in: "path"
        description: "The member ID."
        required: true
        type: "string"
        x-exportParamName: "MemberId"
      responses:
        204:
          description: "Action completed successfully."
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
    patch:
      tags:
      - "Team members"
      summary: "Modify a team member by ID."
      operationId: "patchMember"
      parameters:
      - name: "memberId"
        in: "path"
        description: "The member ID."
        required: true
        type: "string"
        x-exportParamName: "MemberId"
      - in: "body"
        name: "patchDelta"
        description: "Requires a JSON Patch representation of the desired changes\
          \ to the project. 'http://jsonpatch.com/'"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/PatchOperation"
        x-exportParamName: "PatchDelta"
      responses:
        200:
          description: "Member response."
          schema:
            $ref: "#/definitions/Member"
        400:
          description: "Invalid request body."
        401:
          description: "Invalid access token."
        404:
          description: "Invalid resource specifier."
        409:
          description: "Status conflict."
  /:
    get:
      tags:
      - "Root"
      description: "You can issue a GET request to the root resource to find all of\
        \ the resource categories supported by the API."
      operationId: "getRoot"
      parameters: []
      responses:
        200:
          description: "A list of links to available resources in the API."
          schema:
            $ref: "#/definitions/Links"
        401:
          description: "Invalid access token."
securityDefinitions:
  Token:
    description: "https://app.launchdarkly.com/settings#/tokens"
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  Link:
    type: "object"
    properties:
      href:
        type: "string"
        example: "/api/v2/endpoint"
      type:
        type: "string"
        example: "application/json"
    example:
      href: "/api/v2/endpoint"
      type: "application/json"
  Links:
    type: "object"
    properties:
      self:
        $ref: "#/definitions/Link"
      next:
        $ref: "#/definitions/Link"
    example:
      next:
        href: "/api/v2/endpoint"
        type: "application/json"
      self:
        href: "/api/v2/endpoint"
        type: "application/json"
  Webhook:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      _id:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      url:
        type: "string"
        example: "https://example.com/example"
        description: "The URL of the remote webhook."
      secret:
        type: "string"
        example: "frobozz"
        description: "If defined, the webhooks post request will include a X-LD-Signature\
          \ header whose value will contain an HMAC SHA256 hex digest of the webhook\
          \ payload, using the secret as the key."
      on:
        type: "boolean"
        example: true
        description: "Whether this webhook is enabled or not."
      name:
        type: "string"
        example: "Example hook"
        description: "The name of the webhook."
      tags:
        type: "array"
        description: "Tags assigned to this webhook."
        items:
          type: "string"
          example: ""
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      name: "Example hook"
      _id: "5a580a01b4ff89217bdf9dc1"
      secret: "frobozz"
      url: "https://example.com/example"
      on: true
      tags:
      - ""
      - ""
  Webhooks:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Webhook"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "Example hook"
        _id: "5a580a01b4ff89217bdf9dc1"
        secret: "frobozz"
        url: "https://example.com/example"
        on: true
        tags:
        - ""
        - ""
      - _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "Example hook"
        _id: "5a580a01b4ff89217bdf9dc1"
        secret: "frobozz"
        url: "https://example.com/example"
        on: true
        tags:
        - ""
        - ""
  FeatureFlag:
    type: "object"
    properties:
      key:
        type: "string"
        example: "test-feature"
      name:
        type: "string"
        example: "Test Feature"
        description: "Name of the feature flag."
      description:
        type: "string"
        example: "This flag controls whether test feature is turned on or not."
        description: "Description of the feature flag."
      kind:
        type: "string"
        example: "boolean"
        description: "Whether the feature flag is a boolean flag or multivariate."
      creationDate:
        type: "number"
        format: "int64"
        example: 1.44365223259E12
        description: "A unix epoch time in milliseconds specifying the creation time\
          \ of this flag."
      includeInSnippet:
        type: "boolean"
        example: false
      temporary:
        type: "boolean"
        example: false
        description: "Whether or not this flag is temporary."
      maintainerId:
        type: "string"
        example: "561c579cd8fd5c2704000001"
        description: "The ID of the member that should maintain this flag."
      tags:
        type: "array"
        example: []
        description: "An array of tags for this feature flag."
        items:
          type: "string"
      variations:
        type: "array"
        example:
        - value: "a"
        - value: "b"
        description: "The variations for this feature flag."
        items:
          $ref: "#/definitions/Variation"
      goalIds:
        type: "array"
        example:
        - "d7239405bd89c930e885aa76"
        - "405bc930e88d7239d895aa76"
        description: "An array goals from all environments associated with this feature\
          \ flag"
        items:
          type: "string"
      _version:
        type: "integer"
        example: 23
      customProperties:
        type: "object"
        example:
          bugs:
            name: "Issue tracker ids"
            value:
            - "123"
            - "456"
          deprecated:
            name: "Deprecated Date"
            value: []
        description: "A mapping of keys to CustomProperty entries."
        additionalProperties:
          $ref: "#/definitions/CustomProperty"
      _links:
        $ref: "#/definitions/Links"
      _maintainer:
        $ref: "#/definitions/Member"
      environments:
        type: "object"
        additionalProperties:
          $ref: "#/definitions/FeatureFlagConfig"
    example:
      temporary: false
      _maintainer:
        firstName: "Alan"
        lastName: "Turing"
        role: {}
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _pendingInvite: true
        isBeta: true
        _id: "5a580a01b4ff89217bdf9dc1"
        email: "user@launchdarkly.com"
        customRoles:
        - "5a580a01b4ff89217bdf9dc1"
        - "5a580a01b4ff89217bdf9dc1"
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      environments:
        key:
          prerequisites:
          - key: "key"
            variation: 7
          - key: "key"
            variation: 7
          archived: true
          salt: "YWx0ZXJuYXRlLnBhZ2U="
          rules:
          - rollout:
              variations:
              - weight: 5
                variation: 1
              - weight: 5
                variation: 1
            clauses:
            - op: "in"
              negate: true
              values:
              - "Top Customers"
              - "Top Customers"
              attribute: "groups"
            - op: "in"
              negate: true
              values:
              - "Top Customers"
              - "Top Customers"
              attribute: "groups"
            _id: "_id"
            variation: 6
          - rollout:
              variations:
              - weight: 5
                variation: 1
              - weight: 5
                variation: 1
            clauses:
            - op: "in"
              negate: true
              values:
              - "Top Customers"
              - "Top Customers"
              attribute: "groups"
            - op: "in"
              negate: true
              values:
              - "Top Customers"
              - "Top Customers"
              attribute: "groups"
            _id: "_id"
            variation: 6
          sel: "45501b9314dc4641841af774cb038b96"
          lastModified: 1469326565348
          trackEvents: false
          fallthrough:
            rollout:
              variations:
              - weight: 5
                variation: 1
              - weight: 5
                variation: 1
            variation: 5
          offVariation: 2
          version: 65
          targets:
          - values:
            - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
            - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
            variation: 0
          - values:
            - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
            - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
            variation: 0
          on: true
      kind: "boolean"
      description: "This flag controls whether test feature is turned on or not."
      creationDate: 1.44365223259E12
      tags: []
      goalIds:
      - "d7239405bd89c930e885aa76"
      - "405bc930e88d7239d895aa76"
      includeInSnippet: false
      maintainerId: "561c579cd8fd5c2704000001"
      customProperties:
        bugs:
          name: "Issue tracker ids"
          value:
          - "123"
          - "456"
        deprecated:
          name: "Deprecated Date"
          value: []
      variations:
      - value: "a"
      - value: "b"
      name: "Test Feature"
      _version: 23
      key: "test-feature"
  FeatureFlags:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/FeatureFlag"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - temporary: false
        _maintainer:
          firstName: "Alan"
          lastName: "Turing"
          role: {}
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _pendingInvite: true
          isBeta: true
          _id: "5a580a01b4ff89217bdf9dc1"
          email: "user@launchdarkly.com"
          customRoles:
          - "5a580a01b4ff89217bdf9dc1"
          - "5a580a01b4ff89217bdf9dc1"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        environments:
          key:
            prerequisites:
            - key: "key"
              variation: 7
            - key: "key"
              variation: 7
            archived: true
            salt: "YWx0ZXJuYXRlLnBhZ2U="
            rules:
            - rollout:
                variations:
                - weight: 5
                  variation: 1
                - weight: 5
                  variation: 1
              clauses:
              - op: "in"
                negate: true
                values:
                - "Top Customers"
                - "Top Customers"
                attribute: "groups"
              - op: "in"
                negate: true
                values:
                - "Top Customers"
                - "Top Customers"
                attribute: "groups"
              _id: "_id"
              variation: 6
            - rollout:
                variations:
                - weight: 5
                  variation: 1
                - weight: 5
                  variation: 1
              clauses:
              - op: "in"
                negate: true
                values:
                - "Top Customers"
                - "Top Customers"
                attribute: "groups"
              - op: "in"
                negate: true
                values:
                - "Top Customers"
                - "Top Customers"
                attribute: "groups"
              _id: "_id"
              variation: 6
            sel: "45501b9314dc4641841af774cb038b96"
            lastModified: 1469326565348
            trackEvents: false
            fallthrough:
              rollout:
                variations:
                - weight: 5
                  variation: 1
                - weight: 5
                  variation: 1
              variation: 5
            offVariation: 2
            version: 65
            targets:
            - values:
              - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
              - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
              variation: 0
            - values:
              - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
              - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
              variation: 0
            on: true
        kind: "boolean"
        description: "This flag controls whether test feature is turned on or not."
        creationDate: 1.44365223259E12
        tags: []
        goalIds:
        - "d7239405bd89c930e885aa76"
        - "405bc930e88d7239d895aa76"
        includeInSnippet: false
        maintainerId: "561c579cd8fd5c2704000001"
        customProperties:
          bugs:
            name: "Issue tracker ids"
            value:
            - "123"
            - "456"
          deprecated:
            name: "Deprecated Date"
            value: []
        variations:
        - value: "a"
        - value: "b"
        name: "Test Feature"
        _version: 23
        key: "test-feature"
      - temporary: false
        _maintainer:
          firstName: "Alan"
          lastName: "Turing"
          role: {}
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _pendingInvite: true
          isBeta: true
          _id: "5a580a01b4ff89217bdf9dc1"
          email: "user@launchdarkly.com"
          customRoles:
          - "5a580a01b4ff89217bdf9dc1"
          - "5a580a01b4ff89217bdf9dc1"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        environments:
          key:
            prerequisites:
            - key: "key"
              variation: 7
            - key: "key"
              variation: 7
            archived: true
            salt: "YWx0ZXJuYXRlLnBhZ2U="
            rules:
            - rollout:
                variations:
                - weight: 5
                  variation: 1
                - weight: 5
                  variation: 1
              clauses:
              - op: "in"
                negate: true
                values:
                - "Top Customers"
                - "Top Customers"
                attribute: "groups"
              - op: "in"
                negate: true
                values:
                - "Top Customers"
                - "Top Customers"
                attribute: "groups"
              _id: "_id"
              variation: 6
            - rollout:
                variations:
                - weight: 5
                  variation: 1
                - weight: 5
                  variation: 1
              clauses:
              - op: "in"
                negate: true
                values:
                - "Top Customers"
                - "Top Customers"
                attribute: "groups"
              - op: "in"
                negate: true
                values:
                - "Top Customers"
                - "Top Customers"
                attribute: "groups"
              _id: "_id"
              variation: 6
            sel: "45501b9314dc4641841af774cb038b96"
            lastModified: 1469326565348
            trackEvents: false
            fallthrough:
              rollout:
                variations:
                - weight: 5
                  variation: 1
                - weight: 5
                  variation: 1
              variation: 5
            offVariation: 2
            version: 65
            targets:
            - values:
              - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
              - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
              variation: 0
            - values:
              - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
              - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
              variation: 0
            on: true
        kind: "boolean"
        description: "This flag controls whether test feature is turned on or not."
        creationDate: 1.44365223259E12
        tags: []
        goalIds:
        - "d7239405bd89c930e885aa76"
        - "405bc930e88d7239d895aa76"
        includeInSnippet: false
        maintainerId: "561c579cd8fd5c2704000001"
        customProperties:
          bugs:
            name: "Issue tracker ids"
            value:
            - "123"
            - "456"
          deprecated:
            name: "Deprecated Date"
            value: []
        variations:
        - value: "a"
        - value: "b"
        name: "Test Feature"
        _version: 23
        key: "test-feature"
  Member:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      _id:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      role:
        $ref: "#/definitions/Role"
      email:
        type: "string"
        example: "user@launchdarkly.com"
      firstName:
        type: "string"
        example: "Alan"
      lastName:
        type: "string"
        example: "Turing"
      _pendingInvite:
        type: "boolean"
      isBeta:
        type: "boolean"
      customRoles:
        type: "array"
        items:
          type: "string"
          example: "5a580a01b4ff89217bdf9dc1"
          description: "The unique resource id."
    example:
      firstName: "Alan"
      lastName: "Turing"
      role: {}
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      _pendingInvite: true
      isBeta: true
      _id: "5a580a01b4ff89217bdf9dc1"
      email: "user@launchdarkly.com"
      customRoles:
      - "5a580a01b4ff89217bdf9dc1"
      - "5a580a01b4ff89217bdf9dc1"
  Members:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Member"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - firstName: "Alan"
        lastName: "Turing"
        role: {}
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _pendingInvite: true
        isBeta: true
        _id: "5a580a01b4ff89217bdf9dc1"
        email: "user@launchdarkly.com"
        customRoles:
        - "5a580a01b4ff89217bdf9dc1"
        - "5a580a01b4ff89217bdf9dc1"
      - firstName: "Alan"
        lastName: "Turing"
        role: {}
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _pendingInvite: true
        isBeta: true
        _id: "5a580a01b4ff89217bdf9dc1"
        email: "user@launchdarkly.com"
        customRoles:
        - "5a580a01b4ff89217bdf9dc1"
        - "5a580a01b4ff89217bdf9dc1"
  FeatureFlagConfig:
    type: "object"
    properties:
      on:
        type: "boolean"
      archived:
        type: "boolean"
      salt:
        type: "string"
        example: "YWx0ZXJuYXRlLnBhZ2U="
      sel:
        type: "string"
        example: "45501b9314dc4641841af774cb038b96"
      lastModified:
        type: "integer"
        format: "int64"
        example: 1469326565348
      version:
        type: "integer"
        example: 65
      targets:
        type: "array"
        items:
          $ref: "#/definitions/Target"
      rules:
        type: "array"
        items:
          $ref: "#/definitions/Rule"
      fallthrough:
        $ref: "#/definitions/Fallthrough"
      offVariation:
        type: "integer"
      prerequisites:
        type: "array"
        items:
          $ref: "#/definitions/Prerequisite"
      trackEvents:
        type: "boolean"
        example: false
        description: "Set to true to send detailed event information for this flag."
    example:
      prerequisites:
      - key: "key"
        variation: 7
      - key: "key"
        variation: 7
      archived: true
      salt: "YWx0ZXJuYXRlLnBhZ2U="
      rules:
      - rollout:
          variations:
          - weight: 5
            variation: 1
          - weight: 5
            variation: 1
        clauses:
        - op: "in"
          negate: true
          values:
          - "Top Customers"
          - "Top Customers"
          attribute: "groups"
        - op: "in"
          negate: true
          values:
          - "Top Customers"
          - "Top Customers"
          attribute: "groups"
        _id: "_id"
        variation: 6
      - rollout:
          variations:
          - weight: 5
            variation: 1
          - weight: 5
            variation: 1
        clauses:
        - op: "in"
          negate: true
          values:
          - "Top Customers"
          - "Top Customers"
          attribute: "groups"
        - op: "in"
          negate: true
          values:
          - "Top Customers"
          - "Top Customers"
          attribute: "groups"
        _id: "_id"
        variation: 6
      sel: "45501b9314dc4641841af774cb038b96"
      lastModified: 1469326565348
      trackEvents: false
      fallthrough:
        rollout:
          variations:
          - weight: 5
            variation: 1
          - weight: 5
            variation: 1
        variation: 5
      offVariation: 2
      version: 65
      targets:
      - values:
        - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
        - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
        variation: 0
      - values:
        - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
        - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
        variation: 0
      on: true
  Target:
    type: "object"
    properties:
      values:
        type: "array"
        items:
          type: "string"
          example: "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
      variation:
        type: "integer"
    example:
      values:
      - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
      - "\"1461797806427-7-115540266\", \"00142875-a39d-4028-a3b7-987ccd151649\""
      variation: 0
  Rule:
    type: "object"
    properties:
      _id:
        type: "string"
      variation:
        type: "integer"
      rollout:
        $ref: "#/definitions/Rollout"
      clauses:
        type: "array"
        items:
          $ref: "#/definitions/Clause"
    example:
      rollout:
        variations:
        - weight: 5
          variation: 1
        - weight: 5
          variation: 1
      clauses:
      - op: "in"
        negate: true
        values:
        - "Top Customers"
        - "Top Customers"
        attribute: "groups"
      - op: "in"
        negate: true
        values:
        - "Top Customers"
        - "Top Customers"
        attribute: "groups"
      _id: "_id"
      variation: 6
  Fallthrough:
    type: "object"
    properties:
      variation:
        type: "integer"
      rollout:
        $ref: "#/definitions/Rollout"
    example:
      rollout:
        variations:
        - weight: 5
          variation: 1
        - weight: 5
          variation: 1
      variation: 5
  Rollout:
    type: "object"
    properties:
      variations:
        type: "array"
        items:
          $ref: "#/definitions/WeightedVariation"
    example:
      variations:
      - weight: 5
        variation: 1
      - weight: 5
        variation: 1
  WeightedVariation:
    type: "object"
    properties:
      variation:
        type: "integer"
      weight:
        type: "integer"
    example:
      weight: 5
      variation: 1
  Clause:
    type: "object"
    properties:
      attribute:
        type: "string"
        example: "groups"
      op:
        type: "string"
        example: "in"
      values:
        type: "array"
        items:
          type: "object"
          example: "Top Customers"
          properties: {}
      negate:
        type: "boolean"
    example:
      op: "in"
      negate: true
      values:
      - "Top Customers"
      - "Top Customers"
      attribute: "groups"
  Variation:
    type: "object"
    required:
    - "value"
    properties:
      name:
        type: "string"
        example: "True"
      description:
        type: "string"
        example: "The true variation"
      value:
        type: "object"
        properties: {}
  Prerequisite:
    type: "object"
    properties:
      key:
        type: "string"
      variation:
        type: "integer"
    example:
      key: "key"
      variation: 7
  FeatureFlagStatus:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      name:
        type: "string"
        description: "| Name     | Description |\n| --------:| ----------- |\n| new\
          \      | the feature flag was created within the last 7 days, and has not\
          \ been requested yet |\n| active   | the feature flag was requested by your\
          \ servers or clients within the last 7 days |\n| inactive | the feature\
          \ flag was created more than 7 days ago, and hasn't been requested by your\
          \ servers or clients within the past 7 days |\n| launched | one variation\
          \ of the feature flag has been rolled out to all your users for at least\
          \ 7 days |\n"
        enum:
        - "new"
        - "active"
        - "inactive"
        - "launched"
      lastRequested:
        type: "string"
        example: "2016-08-16T21:10:11.886Z"
      default:
        type: "object"
        properties: {}
    example:
      lastRequested: "2016-08-16T21:10:11.886Z"
      default: "{}"
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      name: "new"
  FeatureFlagStatuses:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/FeatureFlagStatus"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - lastRequested: "2016-08-16T21:10:11.886Z"
        default: "{}"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "new"
      - lastRequested: "2016-08-16T21:10:11.886Z"
        default: "{}"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "new"
  UserSegment:
    type: "object"
    required:
    - "creationDate"
    - "key"
    - "name"
    properties:
      key:
        type: "string"
        example: "beta-testers"
        description: "Unique identifier for the user segment."
      name:
        type: "string"
        example: "Beta Testers"
        description: "Name of the user segment."
      description:
        type: "string"
        example: "Users in this segment can access beta features."
        description: "Description of the user segment."
      tags:
        type: "array"
        example:
        - "dev"
        - "ops"
        description: "An array of tags for this user segment."
        items:
          type: "string"
      creationDate:
        type: "number"
        format: "int64"
        example: 1.44365223259E12
        description: "A unix epoch time in milliseconds specifying the creation time\
          \ of this flag."
      included:
        type: "array"
        description: "An array of user keys that are included in this segment."
        items:
          type: "string"
      excluded:
        type: "array"
        description: "An array of user keys that should not be included in this segment,\
          \ unless they are also listed in \"included\"."
        items:
          type: "string"
      rules:
        type: "array"
        description: "An array of rules that can cause a user to be included in this\
          \ segment."
        items:
          $ref: "#/definitions/UserSegmentRule"
      version:
        type: "integer"
      _links:
        $ref: "#/definitions/Links"
    example:
      excluded:
      - "excluded"
      - "excluded"
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      name: "Beta Testers"
      description: "Users in this segment can access beta features."
      rules:
      - clauses:
        - op: "in"
          negate: true
          values:
          - "Top Customers"
          - "Top Customers"
          attribute: "groups"
        - op: "in"
          negate: true
          values:
          - "Top Customers"
          - "Top Customers"
          attribute: "groups"
        weight: 0
        bucketBy: "bucketBy"
      - clauses:
        - op: "in"
          negate: true
          values:
          - "Top Customers"
          - "Top Customers"
          attribute: "groups"
        - op: "in"
          negate: true
          values:
          - "Top Customers"
          - "Top Customers"
          attribute: "groups"
        weight: 0
        bucketBy: "bucketBy"
      creationDate: 1.44365223259E12
      included:
      - "included"
      - "included"
      version: 6
      key: "beta-testers"
      tags:
      - "dev"
      - "ops"
  UserSegmentRule:
    type: "object"
    properties:
      clauses:
        type: "array"
        items:
          $ref: "#/definitions/Clause"
      weight:
        type: "integer"
      bucketBy:
        type: "string"
    example:
      clauses:
      - op: "in"
        negate: true
        values:
        - "Top Customers"
        - "Top Customers"
        attribute: "groups"
      - op: "in"
        negate: true
        values:
        - "Top Customers"
        - "Top Customers"
        attribute: "groups"
      weight: 0
      bucketBy: "bucketBy"
  UserSegments:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/UserSegment"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - excluded:
        - "excluded"
        - "excluded"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "Beta Testers"
        description: "Users in this segment can access beta features."
        rules:
        - clauses:
          - op: "in"
            negate: true
            values:
            - "Top Customers"
            - "Top Customers"
            attribute: "groups"
          - op: "in"
            negate: true
            values:
            - "Top Customers"
            - "Top Customers"
            attribute: "groups"
          weight: 0
          bucketBy: "bucketBy"
        - clauses:
          - op: "in"
            negate: true
            values:
            - "Top Customers"
            - "Top Customers"
            attribute: "groups"
          - op: "in"
            negate: true
            values:
            - "Top Customers"
            - "Top Customers"
            attribute: "groups"
          weight: 0
          bucketBy: "bucketBy"
        creationDate: 1.44365223259E12
        included:
        - "included"
        - "included"
        version: 6
        key: "beta-testers"
        tags:
        - "dev"
        - "ops"
      - excluded:
        - "excluded"
        - "excluded"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "Beta Testers"
        description: "Users in this segment can access beta features."
        rules:
        - clauses:
          - op: "in"
            negate: true
            values:
            - "Top Customers"
            - "Top Customers"
            attribute: "groups"
          - op: "in"
            negate: true
            values:
            - "Top Customers"
            - "Top Customers"
            attribute: "groups"
          weight: 0
          bucketBy: "bucketBy"
        - clauses:
          - op: "in"
            negate: true
            values:
            - "Top Customers"
            - "Top Customers"
            attribute: "groups"
          - op: "in"
            negate: true
            values:
            - "Top Customers"
            - "Top Customers"
            attribute: "groups"
          weight: 0
          bucketBy: "bucketBy"
        creationDate: 1.44365223259E12
        included:
        - "included"
        - "included"
        version: 6
        key: "beta-testers"
        tags:
        - "dev"
        - "ops"
  Project:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      _id:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      key:
        type: "string"
        example: "zentasks"
      name:
        type: "string"
        example: "Zentasks"
      environments:
        type: "array"
        items:
          $ref: "#/definitions/Environment"
      tags:
        type: "array"
        description: "An array of tags for this project."
        items:
          type: "string"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      environments:
      - apiKey: "XXX"
        color: "417505"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "Production"
        defaultTtl: 0.0
        _id: "5a580a01b4ff89217bdf9dc1"
        mobileKey: "XXX"
        secureMode: false
        defaultTrackEvents: false
        key: "production"
        tags:
        - "tags"
        - "tags"
      - apiKey: "XXX"
        color: "417505"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "Production"
        defaultTtl: 0.0
        _id: "5a580a01b4ff89217bdf9dc1"
        mobileKey: "XXX"
        secureMode: false
        defaultTrackEvents: false
        key: "production"
        tags:
        - "tags"
        - "tags"
      name: "Zentasks"
      _id: "5a580a01b4ff89217bdf9dc1"
      key: "zentasks"
      tags:
      - "tags"
      - "tags"
  Projects:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/Project"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        environments:
        - apiKey: "XXX"
          color: "417505"
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          name: "Production"
          defaultTtl: 0.0
          _id: "5a580a01b4ff89217bdf9dc1"
          mobileKey: "XXX"
          secureMode: false
          defaultTrackEvents: false
          key: "production"
          tags:
          - "tags"
          - "tags"
        - apiKey: "XXX"
          color: "417505"
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          name: "Production"
          defaultTtl: 0.0
          _id: "5a580a01b4ff89217bdf9dc1"
          mobileKey: "XXX"
          secureMode: false
          defaultTrackEvents: false
          key: "production"
          tags:
          - "tags"
          - "tags"
        name: "Zentasks"
        _id: "5a580a01b4ff89217bdf9dc1"
        key: "zentasks"
        tags:
        - "tags"
        - "tags"
      - _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        environments:
        - apiKey: "XXX"
          color: "417505"
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          name: "Production"
          defaultTtl: 0.0
          _id: "5a580a01b4ff89217bdf9dc1"
          mobileKey: "XXX"
          secureMode: false
          defaultTrackEvents: false
          key: "production"
          tags:
          - "tags"
          - "tags"
        - apiKey: "XXX"
          color: "417505"
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          name: "Production"
          defaultTtl: 0.0
          _id: "5a580a01b4ff89217bdf9dc1"
          mobileKey: "XXX"
          secureMode: false
          defaultTrackEvents: false
          key: "production"
          tags:
          - "tags"
          - "tags"
        name: "Zentasks"
        _id: "5a580a01b4ff89217bdf9dc1"
        key: "zentasks"
        tags:
        - "tags"
        - "tags"
  Environment:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      _id:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      key:
        type: "string"
        example: "production"
        description: "The key for the environment."
      name:
        type: "string"
        example: "Production"
        description: "The name of the environment."
      apiKey:
        type: "string"
        example: "XXX"
        description: "The SDK key for backend LaunchDarkly SDKs."
      mobileKey:
        type: "string"
        example: "XXX"
        description: "The SDK key for mobile LaunchDarkly SDKs."
      color:
        type: "string"
        example: "417505"
        description: "The swatch color for the environment."
      defaultTtl:
        type: "number"
        example: 0.0
        description: "The default TTL."
      secureMode:
        type: "boolean"
        example: false
        description: "Determines if this environment is in safe mode."
      defaultTrackEvents:
        type: "boolean"
        example: false
        description: "Set to true to send detailed event information for new flags."
      tags:
        type: "array"
        description: "An array of tags for this environment."
        items:
          type: "string"
    example:
      apiKey: "XXX"
      color: "417505"
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      name: "Production"
      defaultTtl: 0.0
      _id: "5a580a01b4ff89217bdf9dc1"
      mobileKey: "XXX"
      secureMode: false
      defaultTrackEvents: false
      key: "production"
      tags:
      - "tags"
      - "tags"
  EnvironmentPost:
    type: "object"
    required:
    - "color"
    - "key"
    - "name"
    properties:
      name:
        type: "string"
        example: "Development"
        description: "The name of the new environment."
      key:
        type: "string"
        example: "dev"
        description: "A project-unique key for the new environment."
      color:
        type: "string"
        example: "417505"
        description: "A color swatch (as an RGB hex value with no leading '#', e.g.\
          \ C8C8C8)."
      defaultTtl:
        type: "number"
        example: 0.0
        description: "The default TTL for the new environment."
    example:
      color: "417505"
      name: "Development"
      defaultTtl: 0.0
      key: "dev"
  User:
    type: "object"
    properties:
      key:
        type: "string"
        example: "a00bea"
      secondary:
        type: "string"
      ip:
        type: "string"
      country:
        type: "string"
      email:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      avatar:
        type: "string"
      name:
        type: "string"
        example: "Bob Loblaw"
      anonymous:
        type: "boolean"
      custom:
        type: "object"
        example:
          company: "example.com"
        properties: {}
    example:
      secondary: "secondary"
      country: "country"
      firstName: "firstName"
      lastName: "lastName"
      ip: "ip"
      custom:
        company: "example.com"
      name: "Bob Loblaw"
      anonymous: true
      avatar: "avatar"
      key: "a00bea"
      email: "email"
  UserRecord:
    type: "object"
    properties:
      lastPing:
        type: "string"
        format: "int64"
        example: "2015-03-03T02:37:22.492Z"
      environmentId:
        type: "string"
        example: "54ac2d97de674204ddd61096"
      ownerId:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      user:
        $ref: "#/definitions/User"
      avatar:
        type: "string"
        example: "https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg"
    example:
      environmentId: "54ac2d97de674204ddd61096"
      lastPing: "2015-03-03T02:37:22.492Z"
      avatar: "https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg"
      ownerId: "5a580a01b4ff89217bdf9dc1"
      user:
        secondary: "secondary"
        country: "country"
        firstName: "firstName"
        lastName: "lastName"
        ip: "ip"
        custom:
          company: "example.com"
        name: "Bob Loblaw"
        anonymous: true
        avatar: "avatar"
        key: "a00bea"
        email: "email"
  Users:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      totalCount:
        type: "number"
        example: 3.0
      items:
        type: "array"
        items:
          $ref: "#/definitions/UserRecord"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      totalCount: 3.0
      items:
      - environmentId: "54ac2d97de674204ddd61096"
        lastPing: "2015-03-03T02:37:22.492Z"
        avatar: "https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg"
        ownerId: "5a580a01b4ff89217bdf9dc1"
        user:
          secondary: "secondary"
          country: "country"
          firstName: "firstName"
          lastName: "lastName"
          ip: "ip"
          custom:
            company: "example.com"
          name: "Bob Loblaw"
          anonymous: true
          avatar: "avatar"
          key: "a00bea"
          email: "email"
      - environmentId: "54ac2d97de674204ddd61096"
        lastPing: "2015-03-03T02:37:22.492Z"
        avatar: "https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg"
        ownerId: "5a580a01b4ff89217bdf9dc1"
        user:
          secondary: "secondary"
          country: "country"
          firstName: "firstName"
          lastName: "lastName"
          ip: "ip"
          custom:
            company: "example.com"
          name: "Bob Loblaw"
          anonymous: true
          avatar: "avatar"
          key: "a00bea"
          email: "email"
  AuditLogEntry:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      _id:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      date:
        type: "integer"
        format: "int64"
        example: 1472243938774
      kind:
        type: "string"
        example: "environment"
      name:
        type: "string"
        example: "Testing"
      description:
        type: "string"
        example: "Changed the name from Test to Testing"
      shortDescription:
        type: "string"
        example: "\"\""
      comment:
        type: "string"
        example: "This is a comment string"
      member:
        $ref: "#/definitions/Member"
      titleVerb:
        type: "string"
        example: "changed the name of"
      title:
        type: "string"
        example: "[Reese Applebaum](mailto:refapp@launchdarkly.com) changed the name\
          \ of [Testing](https://app.launchdarkly.com/settings#/projects)"
      target:
        $ref: "#/definitions/AuditLogEntry_target"
    example:
      date: 1472243938774
      titleVerb: "changed the name of"
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      kind: "environment"
      name: "Testing"
      member:
        firstName: "Alan"
        lastName: "Turing"
        role: {}
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        _pendingInvite: true
        isBeta: true
        _id: "5a580a01b4ff89217bdf9dc1"
        email: "user@launchdarkly.com"
        customRoles:
        - "5a580a01b4ff89217bdf9dc1"
        - "5a580a01b4ff89217bdf9dc1"
      description: "Changed the name from Test to Testing"
      comment: "This is a comment string"
      _id: "5a580a01b4ff89217bdf9dc1"
      shortDescription: "\"\""
      title: "[Reese Applebaum](mailto:refapp@launchdarkly.com) changed the name of\
        \ [Testing](https://app.launchdarkly.com/settings#/projects)"
      target:
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "Testing"
        resources:
        - "proj/alexis:env/test"
        - "proj/alexis:env/test"
  AuditLogEntries:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/AuditLogEntry"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - date: 1472243938774
        titleVerb: "changed the name of"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        kind: "environment"
        name: "Testing"
        member:
          firstName: "Alan"
          lastName: "Turing"
          role: {}
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _pendingInvite: true
          isBeta: true
          _id: "5a580a01b4ff89217bdf9dc1"
          email: "user@launchdarkly.com"
          customRoles:
          - "5a580a01b4ff89217bdf9dc1"
          - "5a580a01b4ff89217bdf9dc1"
        description: "Changed the name from Test to Testing"
        comment: "This is a comment string"
        _id: "5a580a01b4ff89217bdf9dc1"
        shortDescription: "\"\""
        title: "[Reese Applebaum](mailto:refapp@launchdarkly.com) changed the name\
          \ of [Testing](https://app.launchdarkly.com/settings#/projects)"
        target:
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          name: "Testing"
          resources:
          - "proj/alexis:env/test"
          - "proj/alexis:env/test"
      - date: 1472243938774
        titleVerb: "changed the name of"
        _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        kind: "environment"
        name: "Testing"
        member:
          firstName: "Alan"
          lastName: "Turing"
          role: {}
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          _pendingInvite: true
          isBeta: true
          _id: "5a580a01b4ff89217bdf9dc1"
          email: "user@launchdarkly.com"
          customRoles:
          - "5a580a01b4ff89217bdf9dc1"
          - "5a580a01b4ff89217bdf9dc1"
        description: "Changed the name from Test to Testing"
        comment: "This is a comment string"
        _id: "5a580a01b4ff89217bdf9dc1"
        shortDescription: "\"\""
        title: "[Reese Applebaum](mailto:refapp@launchdarkly.com) changed the name\
          \ of [Testing](https://app.launchdarkly.com/settings#/projects)"
        target:
          _links:
            next:
              href: "/api/v2/endpoint"
              type: "application/json"
            self:
              href: "/api/v2/endpoint"
              type: "application/json"
          name: "Testing"
          resources:
          - "proj/alexis:env/test"
          - "proj/alexis:env/test"
  UserFlagSetting:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      _value:
        type: "boolean"
        example: true
        description: "The most important attribute in the response. The _value is\
          \ the current setting for the user. For a boolean feature toggle, this will\
          \ be true, false, or null if there is no defined fallthrough value."
      setting:
        type: "boolean"
        description: "The setting attribute indicates whether you've explicitly targeted\
          \ this user to receive a particular variation. For example, if you have\
          \ explicitly turned off a feature toggle for a user, setting will be false.\
          \ A setting of null means that you haven't assigned that user to a specific\
          \ variation."
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      _value: true
      setting: true
  UserFlagSettings:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "object"
        example:
          sort.order:
            _links:
              self:
                href: "/api/v2/users/lacuna/production/Abbie_Braun/flags/sort.order"
                type: "application/json"
              _value: true
          alternate.page:
            _links:
              self:
                href: "/api/v2/users/lacuna/production/Abbie_Braun/flags/alternate.page"
                type: "application/json"
            _value: "false,"
        additionalProperties:
          $ref: "#/definitions/UserFlagSetting"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
        sort.order:
          _links:
            self:
              href: "/api/v2/users/lacuna/production/Abbie_Braun/flags/sort.order"
              type: "application/json"
            _value: true
        alternate.page:
          _links:
            self:
              href: "/api/v2/users/lacuna/production/Abbie_Braun/flags/alternate.page"
              type: "application/json"
          _value: "false,"
  Statements:
    type: "array"
    items:
      $ref: "#/definitions/Statement"
  Statement:
    type: "object"
    properties:
      resources:
        type: "array"
        items:
          type: "string"
          example: "proj/*:env/*:flag/my-flag"
          description: "A resource specifier string"
      notresources:
        type: "array"
        description: "Targeted resource will be those resources NOT in this list.\
          \ The \"resources`\" field must be empty to use this field."
        items:
          type: "string"
          example: "proj/*:env/*:flag/my-flag"
          description: "A resource specifier string"
      actions:
        type: "array"
        items:
          type: "string"
          example: "updateOn"
          description: "An action to perform on a resource."
      notactions:
        type: "array"
        description: "Targeted actions will be those actions NOT in this list. The\
          \ \"actions\" field must be empty to use this field."
        items:
          type: "string"
          example: "updateOn"
          description: "An action to perform on a resource."
      effect:
        type: "string"
        enum:
        - "allow"
        - "deny"
  Role:
    type: "string"
    enum:
    - "writer"
    - "reader"
    - "admin"
    - "owner"
  CustomRole:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      name:
        type: "string"
        example: "revenue team"
        description: "Name of the custom role."
      key:
        type: "string"
        example: "revenue-team"
        description: "The 20-hexdigit id or the key for a custom role."
      description:
        type: "string"
        example: "Description of revenue team role here"
        description: "Description of the custom role."
      _id:
        type: "string"
        example: "5a580a01b4ff89217bdf9dc1"
        description: "The unique resource id."
      policy:
        type: "array"
        items:
          $ref: "#/definitions/Policy"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      name: "revenue team"
      description: "Description of revenue team role here"
      _id: "5a580a01b4ff89217bdf9dc1"
      key: "revenue-team"
      policy:
      - effect: "deny"
        resources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        actions:
        - "updateOn"
        - "updateOn"
      - effect: "deny"
        resources:
        - "proj/*:env/*:flag/my-flag"
        - "proj/*:env/*:flag/my-flag"
        actions:
        - "updateOn"
        - "updateOn"
  CustomRoles:
    type: "object"
    properties:
      _links:
        $ref: "#/definitions/Links"
      items:
        type: "array"
        items:
          $ref: "#/definitions/CustomRole"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      items:
      - _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "revenue team"
        description: "Description of revenue team role here"
        _id: "5a580a01b4ff89217bdf9dc1"
        key: "revenue-team"
        policy:
        - effect: "deny"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        - effect: "deny"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
      - _links:
          next:
            href: "/api/v2/endpoint"
            type: "application/json"
          self:
            href: "/api/v2/endpoint"
            type: "application/json"
        name: "revenue team"
        description: "Description of revenue team role here"
        _id: "5a580a01b4ff89217bdf9dc1"
        key: "revenue-team"
        policy:
        - effect: "deny"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
        - effect: "deny"
          resources:
          - "proj/*:env/*:flag/my-flag"
          - "proj/*:env/*:flag/my-flag"
          actions:
          - "updateOn"
          - "updateOn"
  Policy:
    type: "object"
    properties:
      resources:
        type: "array"
        items:
          type: "string"
          example: "proj/*:env/*:flag/my-flag"
          description: "A resource specifier string"
      actions:
        type: "array"
        items:
          type: "string"
          example: "updateOn"
          description: "An action to perform on a resource."
      effect:
        type: "string"
        example: "deny"
        description: "Effect of the policy - allow or deny."
    example:
      effect: "deny"
      resources:
      - "proj/*:env/*:flag/my-flag"
      - "proj/*:env/*:flag/my-flag"
      actions:
      - "updateOn"
      - "updateOn"
  Id:
    type: "string"
    description: "The unique resource id."
    example: "5a580a01b4ff89217bdf9dc1"
  PatchOperation:
    type: "object"
    required:
    - "op"
    - "path"
    - "value"
    properties:
      op:
        type: "string"
        example: "replace"
      path:
        type: "string"
        example: "/on"
      value:
        type: "object"
        properties: {}
  CustomProperty:
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "My property"
        description: "The name of the property."
      value:
        type: "array"
        description: "Values for this property."
        items:
          type: "string"
          example: ""
    description: "A name and value describing a custom property."
  projectBody:
    type: "object"
    required:
    - "key"
    - "name"
    properties:
      name:
        type: "string"
        example: "New Project"
      key:
        type: "string"
        example: "new-project"
      environments:
        type: "array"
        items:
          $ref: "#/definitions/EnvironmentPost"
  featureFlagBody:
    type: "object"
    required:
    - "key"
    - "name"
    - "variations"
    properties:
      name:
        type: "string"
        example: "new test flag"
        description: "A human-friendly name for the feature flag. Remember to note\
          \ if this flag is intended to be temporary or permanent."
      key:
        type: "string"
        example: "new-test-flag"
        description: "A unique key that will be used to reference the flag in your\
          \ code."
      description:
        type: "string"
        example: "This flag controls whether test feature is turned on or not."
        description: "A description of the feature flag."
      variations:
        type: "array"
        description: "An array of possible variations for the flag."
        items:
          $ref: "#/definitions/Variation"
      temporary:
        type: "boolean"
        description: "Whether or not the flag is a temporary flag."
      tags:
        type: "array"
        description: "Tags for the feature flag."
        items:
          type: "string"
          example: ""
      includeInSnippet:
        type: "boolean"
        description: "Whether or not this flag should be made available to the client-side\
          \ JavaScript SDK."
  patchComment:
    type: "object"
    properties:
      comment:
        type: "string"
        example: "This is a comment string"
      patch:
        type: "array"
        items:
          $ref: "#/definitions/PatchOperation"
  userSegmentBody:
    type: "object"
    required:
    - "key"
    - "name"
    properties:
      name:
        type: "string"
        example: "new segment"
        description: "A human-friendly name for the user segment."
      key:
        type: "string"
        example: "new-segment"
        description: "A unique key that will be used to reference the user segment\
          \ in feature flags."
      description:
        type: "string"
        example: "Users in this segment will have access to beta features."
        description: "A description for the user segment."
      tags:
        type: "array"
        description: "Tags for the user segment."
        items:
          type: "string"
          example: ""
  userSettingsBody:
    type: "object"
    properties:
      setting:
        type: "boolean"
        description: "The variation value to set for the user. Must match the variation\
          \ type of the flag.\n"
  webhookBody:
    type: "object"
    required:
    - "on"
    - "sign"
    - "url"
    properties:
      url:
        type: "string"
        example: "https://example.com/example"
        description: "The URL of the remote webhook."
      secret:
        type: "string"
        example: "<password>"
        description: "If sign is true, and the secret attribute is omitted, LaunchDarkly\
          \ will automatically generate a secret for you."
      sign:
        type: "boolean"
        description: "If sign is false, the webhook will not include a signature header,\
          \ and the secret can be omitted."
      on:
        type: "boolean"
        example: true
        description: "Whether this webhook is enabled or not."
      name:
        type: "string"
        example: "Example hook"
        description: "The name of the webhook."
  customRoleBody:
    type: "object"
    required:
    - "key"
    - "name"
    - "policy"
    properties:
      name:
        type: "string"
        example: "revenue team"
        description: "Name of the custom role."
      description:
        type: "string"
        example: "Description of revenue team role here"
        description: "Description of the custom role."
      key:
        type: "string"
        example: "revenue-team"
        description: "The 20-hexdigit id or the key for a custom role."
      policy:
        type: "array"
        items:
          $ref: "#/definitions/Policy"
  membersBody:
    required:
    - "email"
    properties:
      email:
        type: "string"
        example: "exampleuser@email.com"
      firstName:
        type: "string"
        example: "Bob"
      lastName:
        type: "string"
        example: "Loblaw"
      role:
        $ref: "#/definitions/Role"
      customRoles:
        type: "array"
        items:
          type: "string"
          example: "revenue-team"
          description: "The 20-hexdigit id or the key for a custom role."
      inlineRole:
        $ref: "#/definitions/Statements"
  AuditLogEntry_target:
    properties:
      _links:
        $ref: "#/definitions/Links"
      name:
        type: "string"
        example: "Testing"
      resources:
        type: "array"
        items:
          type: "string"
          example: "proj/alexis:env/test"
    example:
      _links:
        next:
          href: "/api/v2/endpoint"
          type: "application/json"
        self:
          href: "/api/v2/endpoint"
          type: "application/json"
      name: "Testing"
      resources:
      - "proj/alexis:env/test"
      - "proj/alexis:env/test"
parameters:
  ResourceId:
    name: "resourceId"
    in: "path"
    description: "The resource ID."
    required: true
    type: "string"
    x-exportParamName: "ResourceId"
  WebhookPostRequest:
    in: "body"
    name: "webhookBody"
    description: "New webhook."
    required: true
    schema:
      $ref: "#/definitions/webhookBody"
    x-exportParamName: "WebhookBody"
  FeatureFlagPostRequest:
    in: "body"
    name: "featureFlagBody"
    description: "Create a new feature flag."
    required: true
    schema:
      $ref: "#/definitions/featureFlagBody"
    x-exportParamName: "FeatureFlagBody"
  UserSegmentPostRequest:
    in: "body"
    name: "userSegmentBody"
    description: "Create a new user segment."
    required: true
    schema:
      $ref: "#/definitions/userSegmentBody"
    x-exportParamName: "UserSegmentBody"
  ProjectPostRequest:
    in: "body"
    name: "projectBody"
    description: "Project keys must be unique within an account."
    required: true
    schema:
      $ref: "#/definitions/projectBody"
    x-exportParamName: "ProjectBody"
  EnvironmentPostRequest:
    in: "body"
    name: "environmentBody"
    description: "New environment."
    required: true
    schema:
      $ref: "#/definitions/EnvironmentPost"
    x-exportParamName: "EnvironmentBody"
  ProjectKey:
    name: "projectKey"
    in: "path"
    description: "The project key, used to tie the flags together under one project\
      \ so they can be managed together."
    required: true
    type: "string"
    x-exportParamName: "ProjectKey"
  EnvironmentKey:
    name: "environmentKey"
    in: "path"
    description: "The environment key, used to tie together flag configuration and\
      \ users under one environment so they can be managed together."
    required: true
    type: "string"
    x-exportParamName: "EnvironmentKey"
  EnvironmentKeyQuery:
    name: "env"
    in: "query"
    description: "By default, each feature will include configurations for each environment.\
      \ You can filter environments with the env query parameter. For example, setting\
      \ env=production will restrict the returned configurations to just your production\
      \ environment."
    required: false
    type: "string"
    x-exportParamName: "Env"
    x-optionalDataType: "String"
  FeatureFlagKey:
    name: "featureFlagKey"
    in: "path"
    description: "The feature flag's key. The key identifies the flag in your code."
    required: true
    type: "string"
    x-exportParamName: "FeatureFlagKey"
  CloneFlagKeyQuery:
    name: "clone"
    in: "query"
    description: "The key of the feature flag to be cloned. The key identifies the\
      \ flag in your code.  For example, setting clone=flagKey will copy the full\
      \ targeting configuration for all environments (including on/off state) from\
      \ the original flag to the new flag."
    required: false
    type: "string"
    x-exportParamName: "Clone"
    x-optionalDataType: "String"
  UserSegmentKey:
    name: "userSegmentKey"
    in: "path"
    description: "The user segment's key. The key identifies the user segment in your\
      \ code."
    required: true
    type: "string"
    x-exportParamName: "UserSegmentKey"
  UserKey:
    name: "userKey"
    in: "path"
    description: "The user's key."
    required: true
    type: "string"
    x-exportParamName: "UserKey"
  Tag:
    name: "tag"
    in: "query"
    description: "Filter by tag. A tag can be used to group flags across projects."
    required: false
    type: "string"
    x-exportParamName: "Tag"
    x-optionalDataType: "String"
  Limit:
    name: "limit"
    in: "query"
    description: "Pagination limit."
    required: false
    type: "integer"
    x-exportParamName: "Limit"
    x-optionalDataType: "Int32"
  Query:
    name: "q"
    in: "query"
    description: "Search query."
    required: false
    type: "string"
    x-exportParamName: "Q"
    x-optionalDataType: "String"
  HMAC:
    name: "h"
    in: "query"
    description: "This parameter is required when following \"next\" links."
    required: false
    type: "string"
    x-exportParamName: "H"
    x-optionalDataType: "String"
  ScrollId:
    name: "scrollId"
    in: "query"
    description: "This parameter is required when following \"next\" links."
    required: false
    type: "string"
    x-exportParamName: "ScrollId"
    x-optionalDataType: "String"
  Offset:
    name: "offset"
    in: "query"
    description: "Specifies the first item to return in the collection."
    required: false
    type: "integer"
    x-exportParamName: "Offset"
    x-optionalDataType: "Int32"
  After:
    name: "after"
    in: "query"
    description: "A timestamp filter, expressed as a Unix epoch time in milliseconds.\
      \ All entries returned will have occured after this timestamp."
    required: false
    type: "number"
    format: "int64"
    x-exportParamName: "After"
    x-optionalDataType: "Float32"
  PatchRequest:
    in: "body"
    name: "patchDelta"
    description: "Requires a JSON Patch representation of the desired changes to the\
      \ project. 'http://jsonpatch.com/'"
    required: true
    schema:
      type: "array"
      items:
        $ref: "#/definitions/PatchOperation"
    x-exportParamName: "PatchDelta"
  UserSettingsPutRequest:
    in: "body"
    name: "userSettingsBody"
    required: true
    schema:
      $ref: "#/definitions/userSettingsBody"
    x-exportParamName: "UserSettingsBody"
  Before:
    name: "before"
    in: "query"
    description: "A timestamp filter, expressed as a Unix epoch time in milliseconds.\
      \ All entries returned will have before this timestamp."
    required: false
    type: "number"
    x-exportParamName: "Before"
    x-optionalDataType: "Float32"
  Q:
    name: "q"
    in: "query"
    description: "Text to search for. You can search for the full or partial name\
      \ of the resource involved or fullpartial email address of the member who made\
      \ the change."
    required: false
    type: "string"
    x-exportParamName: "Q"
    x-optionalDataType: "String"
  AuditLimit:
    name: "limit"
    in: "query"
    description: "A limit on the number of audit log entries to be returned, between\
      \ 1 and 20."
    required: false
    type: "number"
    x-exportParamName: "Limit"
    x-optionalDataType: "Float32"
  Spec:
    name: "spec"
    in: "query"
    description: "A resource specifier, allowing you to filter audit log listings\
      \ by resource."
    required: false
    type: "string"
    x-exportParamName: "Spec"
    x-optionalDataType: "String"
  MembersPostRequest:
    in: "body"
    name: "membersBody"
    description: "New members to invite."
    required: true
    schema:
      type: "array"
      items:
        $ref: "#/definitions/membersBody"
    x-exportParamName: "MembersBody"
  MemberId:
    name: "memberId"
    in: "path"
    description: "The member ID."
    required: true
    type: "string"
    x-exportParamName: "MemberId"
  CustomRolePostRequest:
    in: "body"
    name: "customRoleBody"
    description: "New role or roles to create."
    required: true
    schema:
      $ref: "#/definitions/customRoleBody"
    x-exportParamName: "CustomRoleBody"
  CustomRoleKey:
    name: "customRoleKey"
    in: "path"
    description: "The custom role key."
    required: true
    type: "string"
    x-exportParamName: "CustomRoleKey"
  PatchWithComment:
    in: "body"
    name: "patchComment"
    description: "Requires a JSON Patch representation of the desired changes to the\
      \ project, and an optional comment. 'http://jsonpatch.com/' Feature flag patches\
      \ also support JSON Merge Patch format. 'https://tools.ietf.org/html/rfc7386'\
      \ The addition of comments is also supported."
    required: true
    schema:
      $ref: "#/definitions/patchComment"
    x-exportParamName: "PatchComment"
  PatchOnly:
    in: "body"
    name: "PatchOnly"
    description: "Requires a JSON Patch representation of the desired changes to the\
      \ project. 'http://jsonpatch.com/' Feature flag patches also support JSON Merge\
      \ Patch format. 'https://tools.ietf.org/html/rfc7386' The addition of comments\
      \ is also supported."
    required: true
    schema:
      type: "array"
      items:
        $ref: "#/definitions/PatchOperation"
    x-exportParamName: "PatchOnly"
responses:
  CustomRole2xx:
    description: "Custom role response."
    schema:
      $ref: "#/definitions/CustomRole"
  Environment2xx:
    description: "Environment response."
    schema:
      $ref: "#/definitions/Environment"
  Member2xx:
    description: "Member response."
    schema:
      $ref: "#/definitions/Member"
  Project2xx:
    description: "Successful Project response."
    schema:
      $ref: "#/definitions/Project"
  Root200:
    description: "A list of links to available resources in the API."
    schema:
      $ref: "#/definitions/Links"
  Standard201:
    description: "Resource created."
  Standard204:
    description: "Action completed successfully."
  Standard400:
    description: "Invalid request body."
  Standard401:
    description: "Invalid access token."
  Standard404:
    description: "Invalid resource specifier."
  Standard409:
    description: "Status conflict."
  UserSegment2xx:
    description: "User segment response."
    schema:
      $ref: "#/definitions/UserSegment"
  Webhook2xx:
    description: "Webhook response."
    schema:
      $ref: "#/definitions/Webhook"
